theirs:
tensor([0.0879, 0.0864, 0.0849, 0.0884, 0.0879, 0.0884, 0.0855, 0.0884, 0.0864,
        0.0879, 0.0879, 0.0879, 0.0884, 0.0849, 0.0879, 0.0879, 0.0879, 0.0879,
        0.0884, 0.0879, 0.0864, 0.0884, 0.0879, 0.0884, 0.0864, 0.0864, 0.0834,
        0.0884, 0.0879, 0.0879, 0.0855, 0.0869, 0.0879, 0.0884, 0.0884, 0.0879,
        0.0884, 0.0855, 0.0879, 0.0869, 0.0884, 0.0879, 0.0884, 0.0855, 0.0864,
        0.0869, 0.0879, 0.0884, 0.0834, 0.0884, 0.0884, 0.0879, 0.0864, 0.0879,
        0.0879, 0.0869, 0.0879, 0.0864, 0.0869, 0.0884, 0.0879, 0.0879, 0.0821,
        0.0834, 0.0879, 0.0869, 0.0884, 0.0879, 0.0869, 0.0884, 0.0849, 0.0879,
        0.0864, 0.0879, 0.0884, 0.0855, 0.0869, 0.0869, 0.0879, 0.0879, 0.0879,
        0.0879, 0.0879, 0.0879, 0.0869, 0.0879, 0.0845, 0.0845, 0.0864, 0.0869,
        0.0879, 0.0884, 0.0869, 0.0879, 0.0879, 0.0884, 0.0884, 0.0855, 0.0845,
        0.0879, 0.0869, 0.0879, 0.0884, 0.0879, 0.0879, 0.0864, 0.0845, 0.0869,
        0.0869, 0.0879, 0.0879, 0.0884, 0.0879, 0.0864, 0.0884, 0.0845, 0.0864,
        0.0884, 0.0879, 0.0869, 0.0884, 0.0879, 0.0879, 0.0869, 0.0879, 0.0864,
        0.0884, 0.0864, 0.0879, 0.0879, 0.0849, 0.0845, 0.0869, 0.0884, 0.0869,
        0.0869, 0.0879, 0.0879, 0.0879, 0.0884, 0.0884, 0.0864, 0.0884, 0.0879,
        0.0849, 0.0869, 0.0879, 0.0884, 0.0884, 0.0869, 0.0884, 0.0869, 0.0864,
        0.0849, 0.0855, 0.0879, 0.0879, 0.0884, 0.0879, 0.0869, 0.0849, 0.0849,
        0.0869, 0.0884, 0.0879, 0.0869, 0.0855, 0.0879, 0.0864, 0.0879, 0.0884,
        0.0869, 0.0869, 0.0864, 0.0884, 0.0864, 0.0884, 0.0879, 0.0879, 0.0884,
        0.0884, 0.0855, 0.0879, 0.0864, 0.0879, 0.0869, 0.0864, 0.0864, 0.0884,
        0.0864, 0.0879, 0.0869, 0.0834, 0.0864, 0.0879, 0.0864, 0.0855, 0.0884,
        0.0879, 0.0864, 0.0884, 0.0879, 0.0869, 0.0879, 0.0879, 0.0884, 0.0879,
        0.0869, 0.0869, 0.0879, 0.0849, 0.0879, 0.0884, 0.0884, 0.0884, 0.0869,
        0.0884, 0.0884, 0.0879, 0.0879, 0.0869, 0.0884, 0.0884, 0.0864, 0.0864,
        0.0869, 0.0884, 0.0884, 0.0864, 0.0884, 0.0884, 0.0855, 0.0849, 0.0855,
        0.0864, 0.0884, 0.0869, 0.0884, 0.0845, 0.0845, 0.0869, 0.0879, 0.0879,
        0.0864, 0.0869, 0.0864, 0.0879, 0.0879, 0.0879, 0.0879, 0.0884, 0.0869,
        0.0869, 0.0884, 0.0884, 0.0849], device='cuda:0', dtype=torch.float32)

ours for the first block:
array([0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08717645,
       0.08717645, 0.08717645, 0.08717645, 0.08717645, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256, 0.08418256, 0.08418256,
       0.08418256, 0.08418256, 0.08418256], dtype=float32)

absmax_bytes = tl.load(absmax_ptr + base_offsets // blocksize, mask=base_offsets // blocksize < absmax_nelems, other=0)
tried base_offsets * 2 which lowered to 15.2%, but it isn't correct. the rationale was because absmax is the same accross the blocksize,
we can just have it grow twice faster and then val0 and val1 would get the right absmax.

then I tried base_idx + tl.arange(0, TILE_SIZE) * 2 which is the correct thing,
and it backed up to 15.6%.
